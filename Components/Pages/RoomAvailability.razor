@page "/room-availability"
@using Google.Apis.Calendar.v3.Data
@using reserveer.Components.Models

@inject DialogService DialogService
@inject AfsprongCalendarService CalendarService

<RadzenScheduler @ref=@scheduler 
    SlotRender=@OnSlotRender style="height: 600px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End" ShowHeader="true"
                 TextProperty="Text" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender   >
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@code {
    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    bool showHeader = true;
    List<Appointment> appointments = new List<Appointment>();   
   protected override async Task OnInitializedAsync()
    {
        var calendarEvents = await CalendarService.GetEventsForMonth(new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1));
        foreach (var calendarEvent in calendarEvents)
        {
            appointments.Add(new Appointment
            {
                Start = calendarEvent.Start.DateTime ?? DateTime.Parse(calendarEvent.Start.Date),
                End = calendarEvent.End.DateTime ?? DateTime.Parse(calendarEvent.End.Date),
                Text = calendarEvent.Summary
            });
        }

        await scheduler.Reload();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {        
            Appointment data = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } }); 

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }        
    }
    

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }    
}